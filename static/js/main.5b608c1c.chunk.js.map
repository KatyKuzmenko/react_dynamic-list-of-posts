{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getData","url","options","fetch","then","response","json","PostsList","selectedUserId","selectedPostId","setselectedPostId","useState","posts","setPosts","loading","setLoading","useEffect","userId","postsFromServer","className","map","post","title","type","onClick","id","getPostComments","postId","NewCommentForm","addNewComment","name","setUserName","email","setUserEmail","body","setCommentBody","onSubmit","event","preventDefault","placeholder","required","value","onChange","target","PostDetails","postDetails","setPostDetails","comments","setComments","isButtonVisible","setIsButtonVisible","details","commentsFromServer","onCommentDelete","commentId","method","updatedComments","length","comment","headers","JSON","stringify","newComments","App","users","setUser","setSelectedPostId","setSelectedUserId","usersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b608c1c.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport function getData<T>(url: string, options = {}): Promise<T> {\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json());\n}\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { Post } from '../../types/Post';\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  selectedUserId: number,\n  selectedPostId: number,\n  setselectedPostId: (selectedPostId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = (\n  { selectedUserId, selectedPostId, setselectedPostId },\n) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n        setLoading(false);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {loading ? 'LOADING...' : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if (selectedPostId === post.id) {\n                    setselectedPostId(post.id);\n                  }\n\n                  setselectedPostId(post.id);\n                }}\n              >\n                {selectedPostId !== post.id\n                  ? 'OPEN'\n                  : 'CLOSE'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import { getData } from './api';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\nexport function getUserPosts(userId: number): Promise<Post[]> {\n  if (userId) {\n    return getData<Post[]>(`/posts?userId=${userId}`);\n  }\n\n  return getData('/posts');\n}\n\nexport function getPostDetails(postId: number): Promise<Post> {\n  if (postId) {\n    return getData<Post>(`/posts/${postId}`);\n  }\n\n  return getData('/posts');\n}\n\nexport function getUsers():Promise<User[]> {\n  return getData('/users');\n}\n","import { getData } from './api';\nimport { Comment } from '../types/Comment';\n\nexport function getPostComments(postId: number): Promise<Comment[]> {\n  if (postId) {\n    return getData<Comment[]>(`/comments?postId=${postId}`);\n  }\n\n  return getData('/posts');\n}\n\nexport function addNewComment(comment: Partial<Comment>):Promise<Comment> {\n  return getData('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({ ...comment }),\n  });\n}\n\nexport function deleteComment(commentId: number) {\n  return getData(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number,\n  addNewComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addNewComment }) => {\n  const [name, setUserName] = useState('');\n  const [email, setUserEmail] = useState('');\n  const [body, setCommentBody] = useState('');\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    addNewComment({\n      name,\n      email,\n      body,\n      postId,\n    } as Comment);\n\n    setUserName('');\n    setUserEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          required\n          value={name}\n          onChange={event => setUserName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          required\n          value={email}\n          onChange={event => setUserEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={event => setCommentBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { addNewComment, deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Comment } from '../../types/Comment';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isButtonVisible, setIsButtonVisible] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(details => setPostDetails(details));\n\n    getPostComments(selectedPostId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  }, [selectedPostId]);\n\n  const onChange = () => {\n    setIsButtonVisible(!isButtonVisible);\n  };\n\n  const onCommentAdd = (comment: Partial<Comment>) => {\n    addNewComment(comment)\n      .then(() => {\n        getPostComments(selectedPostId)\n          .then(newComments => setComments(newComments));\n      });\n  };\n\n  const onCommentDelete = (id: number) => {\n    deleteComment(id)\n      .then(() => {\n        getPostComments(selectedPostId)\n          .then(updatedComments => setComments(updatedComments));\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {postDetails?.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={onChange}\n          >\n            {isButtonVisible\n              ? 'Hide comments'\n              : 'Show comments'}\n          </button>\n        )}\n        <ul className=\"PostDetails__list\">\n          {isButtonVisible && (\n            <>\n              {comments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => onCommentDelete(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>\n                    {comment.body}\n                  </p>\n                </li>\n              ))}\n            </>\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            addNewComment={onCommentAdd}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './types/User';\nimport { getUsers } from './api/posts';\n\nconst App: React.FC = () => {\n  const [users, setUser] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromServer => setUser(usersFromServer));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            name=\"select\"\n            onChange={event => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            setselectedPostId={setSelectedPostId}\n          />\n        </div>\n\n        {!!selectedPostId && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}